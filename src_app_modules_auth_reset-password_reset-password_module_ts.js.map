{"version":3,"file":"src_app_modules_auth_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/@fuse/validators/index.ts","./src/@fuse/validators/public-api.ts","./src/@fuse/validators/validators.ts","./src/app/modules/auth/reset-password/reset-password.component.ts","./src/app/modules/auth/reset-password/reset-password.component.html","./src/app/modules/auth/reset-password/reset-password.module.ts","./src/app/modules/auth/reset-password/reset-password.routing.ts"],"sourcesContent":["export * from '@fuse/validators/public-api';\n","export * from '@fuse/validators/validators';\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport class FuseValidators\n{\n    /**\n     * Check for empty (optional fields) values\n     *\n     * @param value\n     */\n    static isEmptyInputValue(value: any): boolean\n    {\n        return value == null || value.length === 0;\n    }\n\n    /**\n     * Must match validator\n     *\n     * @param controlPath A dot-delimited string values that define the path to the control.\n     * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n     */\n    static mustMatch(controlPath: string, matchingControlPath: string): ValidatorFn\n    {\n        return (formGroup: AbstractControl): ValidationErrors | null => {\n\n            // Get the control and matching control\n            const control = formGroup.get(controlPath);\n            const matchingControl = formGroup.get(matchingControlPath);\n\n            // Return if control or matching control doesn't exist\n            if ( !control || !matchingControl )\n            {\n                return null;\n            }\n\n            // Delete the mustMatch error to reset the error on the matching control\n            if ( matchingControl.hasError('mustMatch') )\n            {\n                delete matchingControl.errors.mustMatch;\n                matchingControl.updateValueAndValidity();\n            }\n\n            // Don't validate empty values on the matching control\n            // Don't validate if values are matching\n            if ( this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value )\n            {\n                return null;\n            }\n\n            // Prepare the validation errors\n            const errors = {mustMatch: true};\n\n            // Set the validation error on the matching control\n            matchingControl.setErrors(errors);\n\n            // Return the errors\n            return errors;\n        };\n    }\n}\n","import { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup, NgForm, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs';\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseValidators } from '@fuse/validators';\nimport { FuseAlertType } from '@fuse/components/alert';\nimport { AuthService } from 'app/core/auth/auth.service';\n\n@Component({\n    selector     : 'auth-reset-password',\n    templateUrl  : './reset-password.component.html',\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class AuthResetPasswordComponent implements OnInit\n{\n    @ViewChild('resetPasswordNgForm') resetPasswordNgForm: NgForm;\n\n    alert: { type: FuseAlertType; message: string } = {\n        type   : 'success',\n        message: ''\n    };\n    resetPasswordForm: UntypedFormGroup;\n    showAlert: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _authService: AuthService,\n        private _formBuilder: UntypedFormBuilder\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Create the form\n        this.resetPasswordForm = this._formBuilder.group({\n                password       : ['', Validators.required],\n                passwordConfirm: ['', Validators.required]\n            },\n            {\n                validators: FuseValidators.mustMatch('password', 'passwordConfirm')\n            }\n        );\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Reset password\n     */\n    resetPassword(): void\n    {\n        // Return if the form is invalid\n        if ( this.resetPasswordForm.invalid )\n        {\n            return;\n        }\n\n        // Disable the form\n        this.resetPasswordForm.disable();\n\n        // Hide the alert\n        this.showAlert = false;\n\n        // Send the request to the server\n        this._authService.resetPassword(this.resetPasswordForm.get('password').value)\n            .pipe(\n                finalize(() => {\n\n                    // Re-enable the form\n                    this.resetPasswordForm.enable();\n\n                    // Reset the form\n                    this.resetPasswordNgForm.resetForm();\n\n                    // Show the alert\n                    this.showAlert = true;\n                })\n            )\n            .subscribe(\n                (response) => {\n\n                    // Set the alert\n                    this.alert = {\n                        type   : 'success',\n                        message: 'Your password has been reset.'\n                    };\n                },\n                (response) => {\n\n                    // Set the alert\n                    this.alert = {\n                        type   : 'error',\n                        message: 'Something went wrong, please try again.'\n                    };\n                }\n            );\n    }\n}\n","<div class=\"flex flex-col sm:flex-row items-center md:items-start sm:justify-center md:justify-start flex-auto min-w-0\">\n    <div class=\"md:flex md:items-center md:justify-end w-full sm:w-auto md:h-full md:w-1/2 py-8 px-4 sm:p-12 md:p-16 sm:rounded-2xl md:rounded-none sm:shadow md:shadow-none sm:bg-card\">\n        <div class=\"w-full max-w-80 sm:w-80 mx-auto sm:mx-0\">\n            <!-- Logo -->\n            <div class=\"w-12\">\n                <img src=\"assets/images/logo/logo.svg\">\n            </div>\n\n            <!-- Title -->\n            <div class=\"mt-8 text-4xl font-extrabold tracking-tight leading-tight\">Reset your password</div>\n            <div class=\"mt-0.5 font-medium\">Create a new password for your account</div>\n\n            <!-- Alert -->\n            <fuse-alert\n                class=\"mt-8 -mb-4\"\n                *ngIf=\"showAlert\"\n                [appearance]=\"'outline'\"\n                [showIcon]=\"false\"\n                [type]=\"alert.type\"\n                [@shake]=\"alert.type === 'error'\">\n                {{alert.message}}\n            </fuse-alert>\n\n            <!-- Reset password form -->\n            <form\n                class=\"mt-8\"\n                [formGroup]=\"resetPasswordForm\"\n                #resetPasswordNgForm=\"ngForm\">\n\n                <!-- Password field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password</mat-label>\n                    <input\n                        id=\"password\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'password'\"\n                        #passwordField>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"passwordField.type === 'password' ? passwordField.type = 'text' : passwordField.type = 'password'\"\n                        matSuffix>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordField.type === 'password'\"\n                            [svgIcon]=\"'heroicons_solid:eye'\"></mat-icon>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordField.type === 'text'\"\n                            [svgIcon]=\"'heroicons_solid:eye-off'\"></mat-icon>\n                    </button>\n                    <mat-error>\n                        Password is required\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- Password confirm field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password (Confirm)</mat-label>\n                    <input\n                        id=\"password-confirm\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'passwordConfirm'\"\n                        #passwordConfirmField>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"passwordConfirmField.type === 'password' ? passwordConfirmField.type = 'text' : passwordConfirmField.type = 'password'\"\n                        matSuffix>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordConfirmField.type === 'password'\"\n                            [svgIcon]=\"'heroicons_solid:eye'\"></mat-icon>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordConfirmField.type === 'text'\"\n                            [svgIcon]=\"'heroicons_solid:eye-off'\"></mat-icon>\n                    </button>\n                    <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('required')\">\n                        Password confirmation is required\n                    </mat-error>\n                    <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('mustMatch')\">\n                        Passwords must match\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- Submit button -->\n                <button\n                    class=\"fuse-mat-button-large w-full mt-3\"\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    [disabled]=\"resetPasswordForm.disabled\"\n                    (click)=\"resetPassword()\">\n                    <span *ngIf=\"!resetPasswordForm.disabled\">\n                        Reset your password\n                    </span>\n                    <mat-progress-spinner\n                        *ngIf=\"resetPasswordForm.disabled\"\n                        [diameter]=\"24\"\n                        [mode]=\"'indeterminate'\"></mat-progress-spinner>\n                </button>\n\n                <!-- Form footer -->\n                <div class=\"mt-8 text-md font-medium text-secondary\">\n                    <span>Return to</span>\n                    <a\n                        class=\"ml-1 text-primary-500 hover:underline\"\n                        [routerLink]=\"['/sign-in']\">sign in\n                    </a>\n                </div>\n\n            </form>\n        </div>\n    </div>\n    <div class=\"relative hidden md:flex flex-auto items-center justify-center w-1/2 h-full p-16 lg:px-28 overflow-hidden bg-gray-800 dark:border-l\">\n        <!-- Background - @formatter:off -->\n        <!-- Rings -->\n        <svg class=\"absolute inset-0 pointer-events-none\"\n             viewBox=\"0 0 960 540\" width=\"100%\" height=\"100%\" preserveAspectRatio=\"xMidYMax slice\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g class=\"text-gray-700 opacity-25\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"100\">\n                <circle r=\"234\" cx=\"196\" cy=\"23\"></circle>\n                <circle r=\"234\" cx=\"790\" cy=\"491\"></circle>\n            </g>\n        </svg>\n        <!-- Dots -->\n        <svg class=\"absolute -top-16 -right-16 text-gray-700\"\n             viewBox=\"0 0 220 192\" width=\"220\" height=\"192\" fill=\"none\">\n            <defs>\n                <pattern id=\"837c3e70-6c3a-44e6-8854-cc48c737b659\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                    <rect x=\"0\" y=\"0\" width=\"4\" height=\"4\" fill=\"currentColor\"></rect>\n                </pattern>\n            </defs>\n            <rect width=\"220\" height=\"192\" fill=\"url(#837c3e70-6c3a-44e6-8854-cc48c737b659)\"></rect>\n        </svg>\n        <!-- @formatter:on -->\n        <!-- Content -->\n        <div class=\"z-10 relative w-full max-w-2xl\">\n            <div class=\"text-7xl font-bold leading-none text-gray-100\">\n                <div>Welcome to</div>\n                <div>our community</div>\n            </div>\n            <div class=\"mt-6 text-lg tracking-tight leading-6 text-gray-400\">\n                Fuse helps developers to build organized and well coded dashboards full of beautiful and rich modules.\n                Join us and start building your application today.\n            </div>\n            <div class=\"flex items-center mt-8\">\n                <div class=\"flex flex-0 items-center -space-x-1.5\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/female-18.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/female-11.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/male-09.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/male-16.jpg\">\n                </div>\n                <div class=\"ml-4 font-medium tracking-tight text-gray-400\">More than 17k people joined us, it's your turn</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { FuseCardModule } from '@fuse/components/card';\nimport { FuseAlertModule } from '@fuse/components/alert';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { AuthResetPasswordComponent } from 'app/modules/auth/reset-password/reset-password.component';\nimport { authResetPasswordRoutes } from 'app/modules/auth/reset-password/reset-password.routing';\n\n@NgModule({\n    declarations: [\n        AuthResetPasswordComponent\n    ],\n    imports     : [\n        RouterModule.forChild(authResetPasswordRoutes),\n        MatButtonModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatProgressSpinnerModule,\n        FuseCardModule,\n        FuseAlertModule,\n        SharedModule\n    ]\n})\nexport class AuthResetPasswordModule\n{\n}\n","import { Route } from '@angular/router';\nimport { AuthResetPasswordComponent } from 'app/modules/auth/reset-password/reset-password.component';\n\nexport const authResetPasswordRoutes: Route[] = [\n    {\n        path     : '',\n        component: AuthResetPasswordComponent\n    }\n];\n"],"names":[],"sourceRoot":"webpack:///"}